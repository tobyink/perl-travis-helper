#!/bin/bash
if [ -z "$MODERN_PERL" ]; then
  MODERN_PERL=perl
fi
PERL_VERSION="$(perl -e'print $] * 1_000_000')"

if [[ "$PERL_VERSION" -ge 5008000 ]]; then
  INSTALL_CMD="cpanm --verbose --no-interactive --no-man-pages --notest --skip-satisfied"
else
  INSTALL_CMD="cpan-installer"
fi
if which apt-get >/dev/null; then
  OS_INSTALLER="sudo apt-get install"
elif which brew >/dev/null; then
  OS_INSTALLER="brew install"
else
  OS_INSTALLER="echo No installer available for "
fi

if [ -n "$VERBOSE" ] && [ "$VERBOSE" -eq 1 ]; then
  INSTALL_WRAPPER='show-verbose'
else
  INSTALL_WRAPPER="show-on-fail"
fi

[ -n "$CPAN_MIRROR" ] && export PERL_CPANM_OPT="--mirror $CPAN_MIRROR $PERL_CPANM_OPT"
export PERL_AUTOINSTALL_PREFER_CPAN=1
export PERL_MM_USE_DEFAULT=1
export NONINTERACTIVE_TESTING=1
export PERL_MM_NONINTERACTIVE=1

[ "$AUTHOR_TESTING" -ne 0 ] && AUTHOR_OPTS='--with-develop'
unset AUTHOR_TESTING
unset RELEASE_TESTING
unset SMOKE_TESTING
unset CONTINUOUS_INTEGRATION

exec </dev/null

function clean_up {
  kill $PROG
  wait 2>/dev/null
}

function show-verbose {
  "$@"
}

function show-on-fail {
  (
    while true; do
      sleep 3
      printf '.'
    done
  ) &
  local PROG=$!
  trap "clean_up $PROG; exit 1" SIGHUP SIGINT SIGTERM
  local log_file="$(mktemp -t cpan-install-log-XXXXXX)"
  "$@" > "$log_file" 2>&1
  local STATUS="$?"
  kill $PROG
  wait $PROG 2>/dev/null
  trap - SIGHUP SIGINT SIGTERM
  if [ "$STATUS" != 0 ]; then
    echo ' Failed!'
    cat "$log_file"
    rm "$log_file"
    return $?
  fi
  rm "$log_file"
  echo ' Done'
}

function os-install {
  local dep="$1"
  local prereq
  while read -a prereq; do
    if [ "${prereq[0]}" == "${dep/~*}" ]; then
      unset prereq[0]
      for os_dep in "${prereq[@]}"; do
        echo "Installing OS package $os_dep..."
        $OS_INSTALLER "$os_dep" || true
      done
    fi
  done < $HELPER_ROOT/os-prereqs.txt
}

function cpan-installer {
  local dep="$1"
  local version=''
  local bare=''
  case "$dep" in
    *.git|*.git@*|git+*://*|git://*)
      cpan-git-install "$dep"
      return
    ;;
    *~*)
      version="${dep/*~/}"
      dep="${dep/~*/}"
    ;;
    */*)
      bare=1
    ;;
  esac
  if [ -z "$bare" ] && perl -e"use $dep $version ();" &>/dev/null; then
    return
  fi
  if perl -e'use CPAN 1.80 ();' &>/dev/null; then
    perl -MCPAN -e'notest(install => @ARGV) or exit 1' "$dep"
  else
    perl -MCPAN -e'force(install => @ARGV) or exit 1' "$dep"
  fi
}

function cpan-git-install {
  local dep="$1"
  local repo="${dep/@*/}"
  local branch="${dep/*@/}"
  if [ "$dep" == "$branch" ]; then
    branch=''
  else
    branch="--branch $branch"
  fi
  local clone_dir="$(mktemp -d -t local-lib-XXXXXX)/repo"
  git clone "$repo" $branch "$clone_dir"
  cd "$clone_dir"
  $HELPER_ROOT/build-dist build_dir
  cd build_dir
  do-install .
}

function install-module {
  for dep in "$@"; do
    os-install "$dep"
    printf "Installing (without testing) $dep ..."
    $INSTALL_WRAPPER $INSTALL_CMD $dep
  done
}

function dynamic_deps {
  if [[ "$PERL_VERSION" -ge 5008000 ]]; then
    cpanm --showdeps -q . --with-recommends $AUTHOR_OPTS
  else
    $HELPER_ROOT/cpan-prereqs
  fi
}

function get_deps {
  local PHASE=$1
  local TYPE=$2
  local META_FILE
  for meta in MYMETA.json MYMETA.yml META.json META.yml; do
    if [ -e "$meta" ]; then
      META_FILE="$meta"
      break
    fi
  done
  if [ -z "$META_FILE" ]; then
    return
  fi
  $MODERN_PERL -MCPAN::Meta -e'
    my ($file, $phase, $type) = @ARGV;
    my $prereq = CPAN::Meta->load_file($file)->effective_prereqs;
    my $req = $prereq->requirements_for($phase, $type)->as_string_hash;
    for my $module (sort keys %$req) {
      next if $module eq "perl";
      my $version = $req->{$module};
      print $module . ($version ? "~$version" : "") . "\n";
    }
  ' $META_FILE $PHASE $TYPE
}

function do-install {
  for arg in "$@"; do
    case $arg in
      --toolchain)
        install-module 'ExtUtils::MakeMaker~6.30'
        install-module 'Exporter~5.57'
        install-module 'Test::Harness~3.01'
      ;;
      --deps)
        echo "Configure prerequisites:"
        for dep in $(get_deps configure requires); do
          install-module $dep
        done

        echo "Other prerequisites:"
        for dep in $(dynamic_deps); do
          case $dep in
            perl*) ;;
            *)
              install-module $dep
            ;;
          esac
        done
      ;;
      --coverage)
        if [ "$COVERAGE" -eq 1 ]; then
          install-module Devel::Cover
          install-module Devel::Cover::Report::Coveralls
        fi
      ;;
      .)
        do-install --deps
        if [ -e 'Makefile' ]; then
          make install
        elif [ -e 'Build' ]; then
          ./Build install
        fi
      ;;
      *)
        install-module $arg
      ;;
    esac
  done
}

do-install "$@"
