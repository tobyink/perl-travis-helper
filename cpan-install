#!/bin/bash
if [ -z "$MODERN_PERL" ]; then
  MODERN_PERL=perl
fi
PERL_VERSION="$(perl -e'print $] * 1_000_000')"

if [[ "$PERL_VERSION" -ge 5008000 ]]; then
  INSTALL_CMD="cpanm --verbose --no-interactive --no-man-pages --notest --skip-satisfied"
else
  INSTALL_CMD="perl -MCPAN -e'install(@ARGV)'"
fi

[ -n "$CPAN_MIRROR" ] && export PERL_CPANM_OPT="--mirror $CPAN_MIRROR $PERL_CPANM_OPT"
export PERL_AUTOINSTALL_PREFER_CPAN=1
export PERL_MM_USE_DEFAULT=1
export NONINTERACTIVE_TESTING=1
export PERL_MM_NONINTERACTIVE=1
exec </dev/null

function clean_up {
  kill $PROG
  wait 2>/dev/null
}

function show-on-fail {
  (
    while true; do
      sleep 3
      printf '.'
    done
  ) &
  local PROG=$!
  trap "clean_up $PROG; exit 1" SIGHUP SIGINT SIGTERM
  local OUT=$("$@" 2&>1 )
  local STATUS=$?
  kill $PROG
  wait $PROG 2>/dev/null
  trap - SIGHUP SIGINT SIGTERM
  if [ $STATUS != 0 ]; then
    echo ' Failed!'
    echo "$OUT"
    return $?
  fi
  echo ' Done'
}

function install-module {
  local deps=$(map_module "$1")
  for dep in $deps; do
    printf "Installing (without testing) $dep ..."
    show-on-fail $INSTALL_CMD $dep
  done
}

function dynamic_deps {
  local AUTHOR_OPTS=''
  if [ -z "$AUTHOR_TESTING" ] || [ "$AUTHOR_TESTING" -ne 0 ]; then
    AUTHOR_OPTS='--with-develop'
  fi
  if [[ "$PERL_VERSION" -ge 5008000 ]]; then
    cpanm --showdeps -q . --with-recommends $AUTHOR_OPTS
  else
    $HELPER_ROOT/cpan-prereqs
  fi
}

function get_deps {
  local PHASE=$1
  local TYPE=$2
  local META_FILE
  for meta in MYMETA.json MYMETA.yml META.json META.yml; do
    if [ -e "$meta" ]; then
      META_FILE="$meta"
      break
    fi
  done
  if [ -z "$META_FILE" ]; then
    return
  fi
  $MODERN_PERL -MCPAN::Meta -e'
    my ($file, $phase, $type) = @ARGV;
    my $prereq = CPAN::Meta->load_file($file)->effective_prereqs;
    my $req = $prereq->requirements_for($phase, $type)->as_string_hash;
    for my $module (sort keys %$req) {
      next if $module eq "perl";
      my $version = $req->{$module};
      print $module . ($version ? "~$version" : "") . "\n";
    }
  ' $META_FILE $PHASE $TYPE
}

function map_module {
  local MODULE="$1"
  MODULE="${MODULE/~*/}"
  if [[ "$PERL_VERSION" -le 5006002 ]]; then
    case $MODULE in
      ExtUtils::MakeMaker)
        echo "MSCHWERN/ExtUtils-MakeMaker-6.56.tar.gz"
        return
      ;;
    esac
  fi
  echo "$MODULE"
}

function do-install {
  for arg in "$@"; do
    case $arg in
      --deps)
        echo "Configure prerequisites:"
        for dep in $(get_deps configure requires); do
          install-module $dep
        done

        echo "Other prerequisites:"
        for dep in $(dynamic_deps); do
          case $dep in
            perl*) ;;
            *)
              install-module $dep
            ;;
          esac
        done
      ;;
      --coverage)
        if [ -n "$COVERAGE" ]; then
          install-module Devel::Cover
          install-module Devel::Cover::Report::Coveralls
        fi
      ;;
      *)
        install-module $arg
      ;;
    esac
  done
}

do-install "$@"
